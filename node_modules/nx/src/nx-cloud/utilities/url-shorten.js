"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.repoUsesGithub = exports.shortenedCloudUrl = void 0;
const devkit_exports_1 = require("../../devkit-exports");
const git_utils_1 = require("../../utils/git-utils");
const semver_1 = require("semver");
async function shortenedCloudUrl(installationSource, accessToken, usesGithub) {
    const githubSlug = (0, git_utils_1.getGithubSlugOrNull)();
    const apiUrl = removeTrailingSlash(process.env.NX_CLOUD_API || process.env.NRWL_API || `https://cloud.nx.app`);
    const version = await getNxCloudVersion(apiUrl);
    if (version && (0, semver_1.lt)(truncateToSemver(version), '2406.11.5')) {
        return apiUrl;
    }
    const source = getSource(installationSource);
    try {
        const response = await require('axios').post(`${apiUrl}/nx-cloud/onboarding`, {
            type: usesGithub ? 'GITHUB' : 'MANUAL',
            source,
            accessToken: usesGithub ? null : accessToken,
            selectedRepositoryName: githubSlug,
        });
        if (!response?.data || response.data.message) {
            throw new Error(response?.data?.message ?? 'Failed to shorten Nx Cloud URL');
        }
        return `${apiUrl}/connect/${response.data}`;
    }
    catch (e) {
        devkit_exports_1.logger.verbose(`Failed to shorten Nx Cloud URL.
    ${e}`);
        return getURLifShortenFailed(usesGithub, githubSlug, apiUrl, source, accessToken);
    }
}
exports.shortenedCloudUrl = shortenedCloudUrl;
async function repoUsesGithub(github) {
    const githubSlug = (0, git_utils_1.getGithubSlugOrNull)();
    const apiUrl = removeTrailingSlash(process.env.NX_CLOUD_API || process.env.NRWL_API || `https://cloud.nx.app`);
    const installationSupportsGitHub = await getInstallationSupportsGitHub(apiUrl);
    return ((githubSlug || github) &&
        (apiUrl.includes('cloud.nx.app') ||
            apiUrl.includes('eu.nx.app') ||
            installationSupportsGitHub));
}
exports.repoUsesGithub = repoUsesGithub;
function removeTrailingSlash(apiUrl) {
    return apiUrl[apiUrl.length - 1] === '/' ? apiUrl.slice(0, -1) : apiUrl;
}
function getSource(installationSource) {
    if (installationSource.includes('nx-init')) {
        return 'nx-init';
    }
    else if (installationSource.includes('nx-connect')) {
        return 'nx-connect';
    }
    else if (installationSource.includes('create-nx-workspace')) {
        return 'create-nx-workspace';
    }
    else {
        return 'other';
    }
}
function getURLifShortenFailed(usesGithub, githubSlug, apiUrl, source, accessToken) {
    if (usesGithub) {
        if (githubSlug) {
            return `${apiUrl}/setup/connect-workspace/github/connect?name=${encodeURIComponent(githubSlug)}&source=${source}`;
        }
        else {
            return `${apiUrl}/setup/connect-workspace/github/select&source=${source}`;
        }
    }
    return `${apiUrl}/setup/connect-workspace/manual?accessToken=${accessToken}&source=${source}`;
}
async function getInstallationSupportsGitHub(apiUrl) {
    try {
        const response = await require('axios').get(`${apiUrl}/vcs-integrations`);
        if (!response?.data || response.data.message) {
            throw new Error(response?.data?.message ?? 'Failed to shorten Nx Cloud URL');
        }
        return !!response.data.github;
    }
    catch (e) {
        if (process.env.NX_VERBOSE_LOGGING) {
            devkit_exports_1.logger.warn(`Failed to access vcs-integrations endpoint.
    ${e}`);
        }
        return false;
    }
}
async function getNxCloudVersion(apiUrl) {
    try {
        const response = await require('axios').get(`${apiUrl}/version`, {
            responseType: 'document',
        });
        const version = extractVersion(response.data);
        if (!version) {
            throw new Error('Failed to extract version from response.');
        }
        return version;
    }
    catch (e) {
        devkit_exports_1.logger.verbose(`Failed to get version of Nx Cloud.
      ${e}`);
    }
}
function extractVersion(htmlString) {
    // The pattern assumes 'Version' is inside an h1 tag and the version number is the next span's content
    const regex = /<h1[^>]*>Version<\/h1>\s*<div[^>]*><div[^>]*><div[^>]*><span[^>]*>([^<]+)<\/span>/;
    const match = htmlString.match(regex);
    return match ? match[1].trim() : null;
}
function truncateToSemver(versionString) {
    // version may be something like 2406.13.5.hotfix2
    return versionString.split(/[\.-]/).slice(0, 3).join('.');
}
